Object subclass: #Dislike	instanceVariableNames: 'usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPractico1'!!Dislike commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	usuario:		<Object>    Implementation Points!!Dislike methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 05:34'!initialize	usuario:= Usuario new.! !Object subclass: #Like	instanceVariableNames: 'usuario fecha'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPractico1'!!Like commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	usuario:		<Object>    Implementation Points!!Like methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 05:34'!initialize		usuario:= Usuario new.! !!Like methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 06:08'!conUsuario: unUsuario	usuario:= unUsuario.	fecha:= DateAndTime today.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Like class	instanceVariableNames: ''!!Like class methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/3/2019 06:07'!conUsuario: unUsuario	^self new conUsuario: unUsuario. ! !Object subclass: #Pregunta	instanceVariableNames: 'titulo descripcion respuestas likes dislikes fechaCreacion topicos usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPractico1'!!Pregunta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	dislikes:		<Object>	fechaCreacion:		<Object>	likes:		<Object>	respuestas:		<Object>	topicos:		<Object>    Implementation Points!!Pregunta methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/1/2019 14:24'!conTitulo: unTitulo conDescripcion: unaDescripcion topicos: unTopicos conUsuario: unUsuario	self initialize.	usuario := unUsuario .	titulo := unTitulo.	descripcion := unaDescripcion .	topicos := unTopicos.	fechaCreacion := DateAndTime today.	topicos do: [ :each | each agregarPregunta: self ] .! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/3/2019 05:08'!dislikes	^dislikes ! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/3/2019 05:09'!likes	^likes ! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 3/26/2019 14:55'!respuestas	^respuestas .! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/3/2019 04:37'!agregarRespuesta: unTexto yUsuario: unUsuario	respuestas add: (Respuesta conUsuario: unUsuario conPregunta: self conTexto: unTexto).! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/1/2019 13:25'!topicos	^topicos	! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 4/1/2019 13:57'!borrarRespuesta: unaRespuesta	respuestas remove: unaRespuesta .! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/26/2019 14:30'!initialize	likes := OrderedCollection new.	dislikes := OrderedCollection new.	respuestas := OrderedCollection new.	topicos := OrderedCollection new.		! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/31/2019 22:48'!obtenerRespuestasEnOrden	^respuestas asSortedCollection: [:unRes :otroRes | (unRes likes size) > (otroRes likes size)]		! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 13:23'!usuario	^usuario .		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/1/2019 14:25'!conTitulo: unTitulo conDescripcion: unDescripcion topicos: unTopicos conUsuario: unUsuario	^self new conTitulo: unTitulo  conDescripcion: unDescripcion  topicos: unTopicos  conUsuario: unUsuario .! !Object subclass: #Respuesta	instanceVariableNames: 'likes dislikes pregunta fechaCreacion texto usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPractico1'!!Respuesta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	dislikes:		<Object>	fechaCreacion:		<Object>	likes:		<Object>	pregunta:		<Object>	texto:		<Object>    Implementation Points!!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2019 22:48'!likes	^likes ! !!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 4/1/2019 13:42'!usuario	^usuario! !!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 4/3/2019 05:09'!dislikes	^dislikes! !!Respuesta methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/31/2019 22:29'!registrarLike: unaPersona	(likes includes: unaPersona)		ifFalse: [ (dislikes includes: unaPersona)				ifFalse: [ likes add: unaPersona ]				ifTrue: [ likes add: unaPersona.					dislikes remove: unaPersona ] ]! !!Respuesta methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/31/2019 22:27'!registrarDislike: unaPersona	(dislikes includes: unaPersona)		ifFalse: [ (likes includes: unaPersona)				ifFalse: [ dislikes add: unaPersona ]				ifTrue: [ dislikes add: unaPersona.					likes remove: unaPersona ] ]! !!Respuesta methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/3/2019 04:45'!conUsuario: unUsuario conPregunta: unaPregunta conText: unTexto.	self initialize.	usuario:= unUsuario .	pregunta := unaPregunta .	texto := unTexto .	fechaCreacion := DateAndTime today.	"pregunta agregarRespuesta: self."              "lo hace en el metodo de pregunta" ! !!Respuesta methodsFor: 'initialization' stamp: 'Anonymous 3/26/2019 14:31'!initialize	dislikes := OrderedCollection new.	likes := OrderedCollection new.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:53'!conUsuario: unUsuario conPregunta: unaPregunta conTexto: unTexto	^self new conUsuario: unUsuario conPregunta: unaPregunta conText: unTexto . ! !Object subclass: #Sistema	instanceVariableNames: 'usuarios topicos'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPractico1'!!Sistema commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	topicos:		<Object>	usuarios:		<Object>    Implementation Points!!Sistema methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 04:23'!agregarRespuestaA: unPregunta yTexto: unTexto yUsuario: unUsuario	unUsuario agregarRespuestaA: unPregunta yTexto: unTexto. 	! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 05:16'!resgitrarDislikeA: unPregOResp yUsuario: unUsuario	unUsuario registrarDislike: unPregOResp.																	! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 13:26'!borrarPregunta: unaPregunta	(unaPregunta usuario) borrarPregunta: unaPregunta .		unaPregunta topicos do:[ :each | each borrarPregunta: unaPregunta ]! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 15:51'!usuarios	^usuarios ! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 13:31'!conocerPreguntaDe: unUsuario	^unUsuario preguntas! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 3/26/2019 14:27'!initialize	usuarios := OrderedCollection new.	topicos := OrderedCollection new.! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 05:16'!resgitrarLikeA: unPregOResp yUsuario: unUsuario	unUsuario registrarLike: unPregOResp.																	! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 3/31/2019 22:49'!obtenerRespuestasEnOrdenDe: unaPregunta	^unaPregunta obtenerRespuestasEnOrden .! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 3/31/2019 22:30'!obtenerPreguntasTopico: unTopico	^unTopico preguntas .! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 04:47'!agregarA: unUsuario comoFollowerDe: otroUsuario	unUsuario follow: otroUsuario.	! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 3/31/2019 22:33'!obtenerPreguntasDeInteresDeUsuario: unUsuario	^unUsuario obtenerPreguntasDeInteres .! !!Sistema methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 15:46'!conocerRespuestasDe: unUsuario	| temp |	temp:= OrderedCollection new.	usuarios		do: [ :each | 			each preguntas respuestas				do: [ :each2 | 					(each2 usuario equals: unUsuario)						ifTrue: [ (temp includes: each2)								ifFalse: [ temp add: each2 ] ] ] ].	^temp.! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 15:22'!agregarPregunta: unTopicos yTitu: unTitu yDesc: unDesc yUsuario: unUsuario	unUsuario agregarPreguntaConTopicos: unTopicos yTitu: unTitu yDesc: unDesc . ! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:26'!agregarTopico: unNom yDesc: unDesc	topicos add: (Topico conNombre: unNom conDescripcion: unDesc)! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:26'!altaCliente: unNom yContra: unContra	usuarios add:(Usuario conNombre: unNom conContraseña: unContra)	.! !Object subclass: #Topico	instanceVariableNames: 'nombre descripcion preguntas'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPractico1'!!Topico commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	descripcion:		<Object>	nombre:		<Object>    Implementation Points!!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/26/2019 14:48'!preguntas	^preguntas.! !!Topico methodsFor: 'initialization' stamp: 'Anonymous 3/26/2019 14:28'!initialize	preguntas := OrderedCollection new.! !!Topico methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 13:24'!borrarPregunta: unaPregunta	preguntas remove: unaPregunta .! !!Topico methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:24'!conNombre: unNombre conDescripcion: unaDescripcion.		nombre := unNombre.		descripcion := unaDescripcion .! !!Topico methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:45'!agregarPregunta: unaPregunta	preguntas add: unaPregunta .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:24'!conNombre: unNombre conDescripcion: unaDescripcion	^self new conNombre: unNombre conDescripcion: unaDescripcion .! !Object subclass: #Usuario	instanceVariableNames: 'seguidos preguntas nombreUsuario contraseña fechaCreacion topicosInteres'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPractico1'!!Usuario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contraseña:		<Object>	fechaCreacion:		<Object>	nombreUsuario:		<Object>	preguntas:		<Object>	seguidos:		<Object>	topicosInteres:		<Object>    Implementation Points!!Usuario methodsFor: 'accessing' stamp: 'Anonymous 4/3/2019 04:34'!agregarRespuestaA: unPregunta yTexto: unTexto	unPregunta agregarRespuesta: unTexto yUsuario: self.! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 4/1/2019 13:31'!preguntas	^preguntas	! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/26/2019 14:22'!nombreUsuario	^nombreUsuario .! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 4/1/2019 15:14'!obtenerPreguntasDeInteres		""		|temp|		temp:= OrderedCollection new.				topicosInteres do:[ :each | (each preguntas do: [ :each2 | (temp includes: each2) ifFalse: [temp add: each2 ] ])]  .		^temp.			! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 4/1/2019 15:41'!conocerRespuesta		""		|temp|		temp:= OrderedCollection new.				topicosInteres do:[ :each | (each preguntas do: [ :each2 | (temp includes: each2) ifFalse: [temp add: each2 ] ])]  .		^temp.			! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/26/2019 14:16'!seguidos	^seguidos.! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2019 22:22'!registrarTopicoInteres: unTopico	topicosInteres add: unTopico.! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 4/1/2019 15:20'!borrarPregunta: unaPregunta	preguntas remove: unaPregunta .	 	unaPregunta topicos do: [ :each | each borrarPregunta: unaPregunta  ]! !!Usuario methodsFor: 'initialization' stamp: 'Anonymous 3/26/2019 14:29'!initialize	seguidos := OrderedCollection new.	preguntas := OrderedCollection new.	topicosInteres := OrderedCollection new.! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/3/2019 05:13'!registrarDislike: unPregOResp	(unPregOResp dislikes includes: self)		ifFalse: [ (unPregOResp likes includes: self)				ifFalse: [unPregOResp dislikes add: self ]				ifTrue: [unPregOResp dislikes add: self.					unPregOResp likes remove: self ] ]! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:18'!nombre: unNombre conContraseña: password 		nombreUsuario := unNombre .		contraseña := password .		fechaCreacion := DateAndTime today.! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/3/2019 06:40'!registrarLike: unPregOResp	"no importa si es una preg o una resp ya que ambas lo hacen de la misma manera"	| likeAux dlAux |		likeAux := unPregOResp likes detect: [ :each | each usuario = self ] ifNone: [ ^nil ].	dlAux:= unPregOResp  dislikes detect: [ :each | each usuario = self ] ifNone: [ ^nil ].	(likeAux isNil)		ifTrue: [ (dlAux isNil) 			ifTrue: [ unPregOResp likes add: (Like conUsuario: self) ]			ifFalse: [ unPregOResp likes add: (Like conUsuario: self).				unPregOResp dislikes remove: dlAux ]	]	 	 "End of statement list encountered ->(unPregOResp likes contains: [ :each | each usuario = self ] )		ifFalse: [ (unPregOResp dislikes contains: [ :each | each usuario = self ])				ifFalse: [unPregOResp likes add: Like conUsuario: self ]				ifTrue: [ unPregOResp likes add: Like conUsuario: self.					unPregOResp dislikes remove: self ] ]"! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/3/2019 04:13'!agregarPreguntaConTopicos: unTopicos yTitu: unTitu yDesc: unDesc 	preguntas add: (Pregunta conTitulo: unTitu conDescripcion: unDesc topicos: unTopicos conUsuario: self).  ! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:16'!follow: unUsuario	seguidos add: unUsuario .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/26/2019 14:21'!conNombre: unNombre conContraseña: unaContraseña	^ self new nombre: unNombre conContraseña: unaContraseña . ! !